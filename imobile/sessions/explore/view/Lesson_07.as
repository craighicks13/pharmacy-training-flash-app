package imobile.sessions.guide.view {	import imobile.sessions.guide.view.LessonBase;	import imobile.sessions.controller.ApplicationController;	import flash.display.MovieClip;	import flash.events.Event;	import flash.ui.Keyboard;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		public class Lesson_07 extends LessonBase	{		public function Lesson_07()	{ getInstance(); }				public override function updateAppStatus():void		{			/* 	CHANGING THE APPLICATION STATE TO THE PROPER 			*   _application.resetState(			*							changeScreen:String="i-mobile", 	// i-mobile, complex_cards, blank			*							showMap:Boolean=false,				// true, false			*							changeStatus:String="available",	// available, enroute, dispatched, arrive, avstation			*							changeStatusNumbers:String="0",		// 0, 1, 2 			*							mainWindow:String="",				//			*							dispatchReportWindow:String="",		//			*							eventListWindow:String=""			//			*						   )			*/			//removeScrollDownListener();			getCurrentFunctionality();		}				public override function getCurrentFunctionality():void		{			trace("LESSON 7 CURRENT FRAME: " + String(currentFrame + (_step/10)));			if(_multiSteps == _step) _multiSteps = 0;			ApplicationController.getInstance().disableAllButtons();			switch(currentFrame + (_step/10))			{				case 1:					_application.visible = false;					bubbles.gotoAndStop(2);					//HIDE_SHOW.addEventListener(MouseEvent.MOUSE_DOWN, hideShow, false, 0, true);					break;				case 2:					_multiSteps = 1;					//remark_added.addEventListener("click", remarksAdded, false, 0, true);					break;				case 2.1:					bubbles.gotoAndStop(2);					ApplicationController.getInstance().setTimer(6);					setInteractListener(ApplicationController.TIMER_DONE);					break;				case 3:					_multiSteps = 1;					//HIDE_SHOW.disable();					//notification['acknowledge'].addEventListener("click", acknowledgeNotification, false, 0, true);					break;				case 3.1:					bubbles.gotoAndStop(2);					//HIDE_SHOW.enable();					//HIDE_SHOW.addEventListener(MouseEvent.MOUSE_DOWN, hideShow, false, 0, true);					break;				case 4:					_multiSteps = 1;					//eventLine.addEventListener("click", eventLineClicked, false, 0, true);					break;				case 4.1:					bubbles.gotoAndStop(2);					ApplicationController.getInstance().setTimer(6);					setInteractListener(ApplicationController.TIMER_DONE);					break;			}		}				public override function setStageListeners():void		{			switch(currentFrame + (_step/10))			{				case 1:					HIDE_SHOW.addEventListener(MouseEvent.MOUSE_DOWN, hideShow, false, 0, true);					break;				case 2:					remark_added.addEventListener("click", remarksAdded, false, 0, true);					break;				case 3:					HIDE_SHOW.disable();					notification['acknowledge'].addEventListener("click", acknowledgeNotification, false, 0, true);					break;				case 3.1:					HIDE_SHOW.enable();					HIDE_SHOW.addEventListener(MouseEvent.MOUSE_DOWN, hideShow, false, 0, true);					break;				case 4:					eventLine.addEventListener("click", eventLineClicked, false, 0, true);					break;			}		}				private function hideShow(e:MouseEvent):void		{			HIDE_SHOW.removeEventListener(MouseEvent.MOUSE_DOWN, hideShow);			proceed(e);		}				private function eventLineClicked(e:Event):void		{			eventLine.removeEventListener("click", eventLineClicked);			eventLine.disable();			eventLine.gotoAndStop(3);			dispatch_report.gotoAndStop(3);			proceed(e);		}				private function remarksAdded(e:Event):void		{			remark_added.removeEventListener("click", remarksAdded);			remark_added.disable();			remark_added.gotoAndStop(3);			dispatch_report.gotoAndStop(2);			proceed(e);		}				private function acknowledgeNotification(e:Event):void		{			notification['acknowledge'].removeEventListener("click", acknowledgeNotification);			removeChild(notification);			proceed(e);		}	}}