package imobile.sessions.guide.view {	import fl.events.ScrollEvent;	import imobile.sessions.guide.view.LessonBase;	import imobile.sessions.controller.ApplicationController;	import flash.display.MovieClip;	import flash.events.Event;		public class Lesson_03 extends LessonBase	{				public function Lesson_03()	{ getInstance(); }				public override function updateAppStatus():void		{			/* 	CHANGING THE APPLICATION STATE TO THE PROPER 			*   _application.resetState(			*							changeScreen:String="i-mobile", 	// i-mobile, complex_cards, blank			*							showMap:Boolean=false,				// true, false			*							changeStatus:String="available",	// available, enroute, dispatched, arrive, avstation			*							changeStatusNumbers:String="0",		// 0, 1, 2 			*							mainWindow:String="",				//			*							dispatchReportWindow:String="",		//			*							eventListWindow:String=""			//			*						   )			*/			getCurrentFunctionality();		}				public override function getCurrentFunctionality():void		{			trace("LESSON 3 CURRENT FRAME: " + String(currentFrame + (_step/10)));			if(_multiSteps == _step) _multiSteps = 0;			ApplicationController.getInstance().disableAllButtons();			switch(currentFrame + (_step/10))			{				case 1:					bubbles.gotoAndStop(2);					_application.addMainWindowItem("event_report_form");					_application.addEventListItem("msg_list");					_application.addDispatchReportItem("event_list");					ApplicationController.getInstance().enableButtons([																	   _application["MB_CC"]																	  ]);					setInteractListener("MB_CC");					break;				case 2:					_multiSteps = 1;					break;				case 2.1:					bubbles.gotoAndStop(2);					_application.complexCards.removeEventListener("ZONE_SELECTED", proceed);					_application.complexCards.addEventListener("GO_SELECTED_ZONE", proceed, false, 0, true);					break;				case 3:					_multiSteps = 1;					break;				case 3.1:					bubbles.gotoAndStop(2);					_application.complexCards._zoneSelect.removeEventListener("ZONE_SELECTED", proceed);					_application.complexCards.addEventListener("GO_SELECTED_COMPLEX_CARD", proceed, false, 0, true);					break;				case 4:					break;				case 5:					break;				case 6:					_multiSteps = 1;					_application.complexCards._zoneSelect.removeEventListener("MAP_ZOOMED", proceed);					ApplicationController.getInstance().enableButtons([																	   _application["MB_IM"]																	  ]);					setInteractListener("MB_IM");					break;				case 6.1:					bubbles.gotoAndStop(2);					ApplicationController.getInstance().enableButtons([																	   _application["MB_CC"]																	  ]);					setInteractListener("MB_CC");					break;				case 7:					_application.visible = false;					break;							}		}				public override function setStageListeners():void		{			switch(currentFrame + (_step/10))			{				case 2:					_application.complexCards.mustSelect = 18;					_application.complexCards.addEventListener("ZONE_SELECTED", proceed, false, 0, true);					break;				case 3:					_application.complexCards._zoneSelect.mustSelect = 9;					_application.complexCards._zoneSelect.addEventListener("ZONE_SELECTED", proceed, false, 0, true);					break;				case 4:					addScrollDownListener();					break;				case 5:					_application.complexCards._zoneSelect.addEventListener("MAP_ZOOMED", proceed, false, 0, true);					addScrollDownListener();					break;			}		}				private function addScrollDownListener():void		{			_application.complexCards._zoneSelect.facilityWindow.addEventListener(ScrollEvent.SCROLL, scrollHandler, false, 0, true);		}				private function scrollHandler(e:ScrollEvent):void		{			 if(e.position >= e.currentTarget.maxVerticalScrollPosition)			 {			 	removeScrollDownListener();				proceed(new Event("scrolled_down"));			 }		}				private function removeScrollDownListener():void		{			try			{				_application.complexCards._zoneSelect.facilityWindow.removeEventListener(ScrollEvent.SCROLL, scrollHandler);			}catch(e:*) {}		}	}}