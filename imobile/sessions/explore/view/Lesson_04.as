package imobile.sessions.guide.view {	import fl.events.ScrollEvent;	import fl.controls.ScrollBarDirection;	import imobile.sessions.guide.view.LessonBase;	import imobile.sessions.controller.ApplicationController;	import imobile.sessions.controller.DrawSelectBox;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.ui.Mouse;		public class Lesson_04 extends LessonBase	{				public function Lesson_04()	{ getInstance(); }				public override function updateAppStatus():void		{			/* 	CHANGING THE APPLICATION STATE TO THE PROPER 			*   _application.resetState(			*							changeScreen:String="i-mobile", 	// i-mobile, complex_cards, blank			*							showMap:Boolean=false,				// true, false			*							changeStatus:String="available",	// available, enroute, dispatched, arrive, avstation			*							changeStatusNumbers:String="0",		// 0, 1, 2 			*							mainWindow:String="",				//			*							dispatchReportWindow:String="",		//			*							eventListWindow:String=""			//			*						   )			*/			//removeScrollDownListener();			getCurrentFunctionality();		}				public override function getCurrentFunctionality():void		{			trace("LESSON 4 CURRENT FRAME: " + String(currentFrame + (_step/10)));			if(_multiSteps == _step) _multiSteps = 0;			ApplicationController.getInstance().disableAllButtons();			switch(currentFrame + (_step/10))			{				case 1:					_application.addMainWindowItem("welcome");					bubbles.gotoAndStop(2);					ApplicationController.getInstance().enableButtons([																	   _application["imobile_interface"]["HIDE_SHOW"]																	  ]);					setInteractListener("HIDE_SHOW");					break;				case 2:					_multiSteps = 1;					_application.visible = false;					//ApplicationController.getInstance().registerCustom(expand_map_clip);					//setInteractListener("MAP_TAB");					break;				case 2.1:					bubbles.gotoAndStop(2);					expand_map_clip.gotoAndStop(2);					ApplicationController.getInstance().registerCustom(expand_map_clip);					setInteractListener("MAP_TAB");					break;				case 3:					_application.visible = false;					//zoomOut.disable();					//zoomIn.enable();					//zoomIn.upState();					//zoomOut.upState();					//zoomIn.addEventListener(MouseEvent.MOUSE_DOWN, zoomInSelected, false, 0, true);					break;				case 4:					//zoomIn.disable();					//zoomIn.downState();					//zoomOut.enable();					//zoomOut.addEventListener(MouseEvent.MOUSE_DOWN, zoomOutSelected, false, 0, true);					break;				case 5:					_multiSteps = 1;					//fitArea.addEventListener(MouseEvent.MOUSE_DOWN, fitAreaSelected, false, 0, true);					break;				case 5.1:					bubbles.gotoAndStop(2);					dragArea();					break;				case 6:					_multiSteps = 2;					_application.visible = true;					_application.mapWindow.source = "map_scroll";					_application.mapWindow.update();					_application.mapWindow.addEventListener(ScrollEvent.SCROLL, scrollVerticalHandler, false, 0, true);					break;				case 6.1:					bubbles.gotoAndStop(2);					_application.mapWindow.addEventListener(ScrollEvent.SCROLL, scrollHorizontalHandler, false, 0, true);					break;				case 6.2:					bubbles.gotoAndStop(3);					setInteractListener("FIT_ALL");					break;				case 7:					_application.visible = false;					break;				case 8:					_multiSteps = 1;					ApplicationController.getInstance().setTimer(12);					setInteractListener(ApplicationController.TIMER_DONE);					break;				case 8.1:					bubbles.gotoAndStop(2);					ApplicationController.getInstance().registerCustom(drive_tab_clip);					setInteractListener("DRIVE_TAB");					break;							}		}				public override function setStageListeners():void		{			switch(currentFrame + (_step/10))			{				case 2:					_application.mapWindow.source = "map_scroll";					ApplicationController.getInstance().registerCustom(expand_map_clip);					setInteractListener("MAP_TAB");					break;				case 3:					zoomOut.disable();					zoomIn.enable();					zoomIn.upState();					zoomOut.upState();					zoomIn.addEventListener(MouseEvent.MOUSE_DOWN, zoomInSelected, false, 0, true);					break;				case 4:					zoomIn.disable();					zoomIn.downState();					zoomOut.enable();					zoomOut.addEventListener(MouseEvent.MOUSE_DOWN, zoomOutSelected, false, 0, true);					break;				case 5:					fitArea.addEventListener(MouseEvent.MOUSE_DOWN, fitAreaSelected, false, 0, true);					break;				case 7:					ApplicationController.getInstance().registerCustom(turns_tab_clip);					setInteractListener("TURNS_TAB");					break;			}		}				function scrollVerticalHandler(e:ScrollEvent):void {			if (e.direction == ScrollBarDirection.VERTICAL)			{				if(e.position >= e.currentTarget.maxVerticalScrollPosition)				{					_application.mapWindow.removeEventListener(ScrollEvent.SCROLL, scrollVerticalHandler);					proceed(e);				}			}		}				function scrollHorizontalHandler(e:ScrollEvent):void {			if (e.direction == ScrollBarDirection.HORIZONTAL)			{				if(e.position >= e.currentTarget.maxHorizontalScrollPosition)				{					_application.mapWindow.removeEventListener(ScrollEvent.SCROLL, scrollHorizontalHandler);					proceed(e);				}			}		}				private function dragArea():void		{			mapArea.addEventListener(MouseEvent.MOUSE_DOWN, drawBox, false, 0, true);		}				private function drawBox(e:MouseEvent):void		{			mapArea.removeEventListener(MouseEvent.MOUSE_DOWN, drawBox);			mapArea.addEventListener(MouseEvent.MOUSE_UP, endDrawBox, false, 0, true);			DrawSelectBox.getInstance().startDraw(mapArea, e.localX, e.localY);		}				private function endDrawBox(e:MouseEvent):void		{			mapArea.removeEventListener(MouseEvent.MOUSE_UP, endDrawBox);			if(DrawSelectBox.getInstance().endDraw())			{				proceed(e);			}			else			{				mapArea.addEventListener(MouseEvent.MOUSE_DOWN, drawBox, false, 0, true);			}		}				private function doZoomIn(e:Event):void		{			e.target.nextFrame();			if(e.target.totalFrames == e.target.currentFrame)			{				mapZoom.removeEventListener("click", doZoomIn);				proceed(e);			}		}				private function doZoomOut(e:Event):void		{			e.target.prevFrame();			proceed(e);		}				private function fitAreaSelected(e:Event):void		{			fitArea.disable();			fitArea.removeEventListener("click", fitAreaSelected);			proceed(e);		}				private function zoomOutSelected(e:Event):void		{			zoomIn.upState();			zoomOut.disable();			zoomOut.removeEventListener("click", zoomOutSelected);			mapZoom.addEventListener("click", doZoomOut, false, 0, true);		}				private function zoomInSelected(e:Event):void		{			zoomIn.disable();			zoomIn.downState();			zoomIn.removeEventListener("click", zoomInSelected);			mapZoom.addEventListener("click", doZoomIn, false, 0, true);		}						private function addScrollDownListener():void		{			_application.mainWindow.addEventListener(ScrollEvent.SCROLL, scrollHandler, false, 0, true);		}				private function scrollHandler(e:ScrollEvent):void		{			 if(e.position >= e.currentTarget.maxVerticalScrollPosition)			 {			 	removeScrollDownListener();				proceed(new Event("scrolled_down"));			 }		}				private function removeScrollDownListener():void		{			try			{				_application.mainWindow.removeEventListener(ScrollEvent.SCROLL, scrollHandler);			}catch(e:*) {}		}	}}