package imobile.view {	// IMPORT FLASH CLASSES	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;    import flash.utils.Timer;    import flash.events.TimerEvent;	// IMPORT CUSTOM CLASSES	import imobile.view.Loading;	import imobile.controller.iSlider;	import imobile.controller.LessonManager;	import imobile.controller.MenuController;	import imobile.controller.LessonsController;		public class MAIN extends MovieClip 	{		private var _syncTimer:Timer;		private var _loading:Loading;		private var _errorMessage:MovieClip;				public function MAIN() 		{			init();		}				public function loadMenues(e:Event):void 		{			LessonManager.getInstance().removeEventListener(LessonManager.LESSONS_READY, loadMenues);			MenuController.getInstance().addMenuItems(LessonManager.getInstance().lessonsList());		}				protected function loadLesson(e:Event):void		{			checkMenu(e.target);			displayLoading();		}				public function lessonLoaded(e:Event):void 		{			removeLoading();			lessonContainer.addChildAt(LessonsController.getInstance().clip, 0);			showHomeScreen(false);			nav_panel.enableButtons();			LessonsController.getInstance().rewind();			if(LessonsController.LESSON_TYPE == "show") doPlay(); else doStop();			setSyncTimer();		}				protected function displayLoading():void		{			_loading.reset();			addChild(_loading);		}				protected function removeLoading():void		{			removeChild(_loading);		}				protected function displayError():void		{			removeLoading();			_errorMessage = new error_message();			addChild(_errorMessage);			_errorMessage.addEventListener(MouseEvent.CLICK, removeError, false, 0, true);		}				protected function removeError(e:Event = undefined):void		{			_errorMessage.removeEventListener(MouseEvent.CLICK, removeError);			removeChild(_errorMessage);		}				protected function removeLesson(e:Event = undefined):void 		{			//LessonsController.getInstance().removeEventListener(LessonsController.REMOVE_LESSON, removeLesson);			try {				doRemove();			}catch(e:RangeError) { }			if(e)				LessonsController.getInstance().loadLesson();			else				showHomeScreen(true);		}				protected function lessonError(e:Event):void		{			showHomeScreen(true);			displayError();			//Alert.show("There was an error loading the selected file.");		}				protected function unloadCurrentLesson():void 		{			LessonsController.getInstance().stop();			removeLesson();		}				public function ToggleMenu():void 		{			if(popup_menu.STATUS == 'OPENED')				popup_menu.closeMenu();			else				popup_menu.openMenu();		}				protected function switchType(param:String):void		{			trace("MAIN:switchType -> " + param.toLowerCase());			LessonsController.getInstance().changeType(param.toLowerCase());		}				protected function showHomeScreen(param:Boolean):void		{			homeScreen.visible = param;		}				protected function doRemove():void		{			lessonContainer.removeChildAt(0);			LessonsController.getInstance().unloadLesson();			unSetSyncTimer();			nav_panel.disableButtons();		}				protected function doPlay():void		{			LessonsController.getInstance().play();			nav_panel.showPlay(false);		}				protected function doStop():void		{			LessonsController.getInstance().stop();			nav_panel.showPlay(true);		}				public function checkMenu(target:Object):void 		{			// CHECK TO SEE IF THE POPUP MENU IS OPEN AND CLOSE IT IF THE 			if(popup_menu.STATUS == 'OPENED' && target != "session_btn") ToggleMenu();		}				public function navControlsClicked(e:Event):void 		{			checkMenu(e.target.name); // CLOSE MENU IF OPEN			// RETURN ON NAV PANEL ITEMS WE DON'T WANT TO HEAR FROM			if(e.target.name == "nav_panel" || e.target.name == "slider_bar" || e.target.name == "bar" || !e.target.ENABLED) return;			// FIND OUT WHICH NAV ITEM WAS CLICKED AND PREFORM THE APPROPRIATE ACTION			switch(e.target.TYPE) 			{				case "REWIND":					LessonsController.getInstance().rewind();					break;				case "PLAY":					doPlay();					break;				case "PAUSE":					doStop();					break;				case "CLOSE":					unloadCurrentLesson();					break;				case "SESSION":					ToggleMenu();					break;				case "SLIDER":					// TRIGGER UPDATE MOVIE					break;				case "GUIDE":				case "EXPLORE":				case "SHOW":					switchType(e.target.TYPE);					break;				default:					trace("clicked: " + e.target.TYPE + " : " + e.target.name);					break;			}		}				protected function sliderReleased(e:Event):void		{			setSyncTimer();			iSlider.getInstance().removeEventListener(iSlider.DROPPED, sliderReleased);			iSlider.getInstance().addEventListener(iSlider.DRAGGING, sliderPressed, false, 0, true);			LessonsController.getInstance().updatePos(iSlider.getInstance().percentPlayed);		}				protected function sliderPressed(e:Event):void		{			unSetSyncTimer();			iSlider.getInstance().removeEventListener(iSlider.DRAGGING, sliderPressed);			iSlider.getInstance().addEventListener(iSlider.DROPPED, sliderReleased, false, 0, true);			LessonsController.getInstance().pause();		}				protected function init():void 		{			LessonManager.getInstance().loadLessons();			LessonManager.getInstance().addEventListener(LessonManager.LESSONS_READY, loadMenues, false, 0, true);						LessonsController.getInstance().addEventListener(LessonsController.LESSON_LOAD, loadLesson, false, 0, true);			LessonsController.getInstance().addEventListener(LessonsController.LESSON_LOADED, lessonLoaded, false, 0, true);			LessonsController.getInstance().addEventListener(LessonsController.LESSON_ERROR, lessonError, false, 0, true);			LessonsController.getInstance().addEventListener(LessonsController.REMOVE_LESSON, removeLesson, false, 0, true);						iSlider.getInstance().setup(nav_panel.bar,nav_panel.slider_bar,nav_panel.slider);			iSlider.getInstance().addEventListener(iSlider.DRAGGING, sliderPressed, false, 0, true);						_loading = new Loading();						nav_panel.addEventListener("click", navControlsClicked, false, 0, true);			_syncTimer = new Timer(10);		}				protected function setSyncTimer():void		{            _syncTimer.addEventListener(TimerEvent.TIMER, syncLessonSlider, false, 0, true);            _syncTimer.start();		}				protected function unSetSyncTimer():void		{            _syncTimer.removeEventListener(TimerEvent.TIMER, syncLessonSlider);            _syncTimer.stop();		}				public function syncLessonSlider(e:TimerEvent):void		{			iSlider.getInstance().updatePos(e, LessonsController.getInstance().percentPlayed);			e.updateAfterEvent();		}	}}